//Generated by StoryHarp from http://www.kurtz-fernhout.com
//Java Shell Portions Copyright 1998 Kurtz-Fernhout Software
import java.awt.*;
import java.util.StringTokenizer;

public class Story extends java.applet.Applet
  {
  private static final int NUMROWS=20;
  private static final int NUMCOLS=47;
  TextArea text = new TextArea("", NUMROWS, NUMCOLS);
  List choices = new List(0, false);
  int numVariables;
  int numRules;
  int currentLocation;
  int wrapCol = 0;
  // define array for name of variables
  String variableName[];
  // define array for value of variables (true or false)
  boolean variableValue[];
  // define array for whether command is available (and so is added to list already)
  boolean variableIsAvailableCommand[];
  // define array for whether all of rules requirements (including context) hold
  boolean ruleSatisfied[];
  Button doIt;
  Button resetButton;
  Button aboutButton;
  boolean resetArmed;

  public void init()
    {
    setLayout(null);
    numVariables = SHNumberVariables();
    numRules = SHNumberRules();
    int width = Integer.parseInt(getParameter("width"));
    int height = Integer.parseInt(getParameter("height"));
    setFont ( new Font("Courier",Font.PLAIN,12));
    add(text);
    text.reshape(0, 0, width, height / 2);
    add(choices);
    choices.reshape(0, height / 2, width, height / 2 - 30);

    doIt = new Button("Do it");
    add(doIt);
    doIt.reshape(0, height - 30, width/3, 30);

    resetButton = new Button("Reset");
    add(resetButton);
    resetButton.reshape(width/3, height - 30, width/3, 30);

    aboutButton = new Button("About");
    add(aboutButton);
    aboutButton.reshape(2 * width/3, height - 30, width/3, 30);

    resize(400, 400);
    allocateSpace();
    SHDefineVariables();
    storyReset();
    }

  public void storyReset()
    {
    text.setText("");
    for (int i = 0; i < numVariables; i++) variableValue[i] = false;
    initialLocation();
    SHComputeSatisfiedRules();
    // AddFeedbackForCommand(SHFirstCommand());
    SHDoCommand(SHFirstCommand());
    setChoices();
    }

  public boolean action (Event e, Object o)
    {
    int command;
    if (o instanceof String)
      {
      if (e.target == aboutButton)
        {
        resetArmed = false;
        reply("\n\n========================================\n");
        reply("This applet's source was generated using\n");
        reply("the StoryHarp(TM) Authoring System\n");
        reply("from http://www.kurtz-fernhout.com\n");
        reply("StoryHarp and portions of the source are\n");
        reply("Copyright 1998 Kurtz-Fernhout Software\n");
        reply("========================================\n");
        }
      if (e.target == resetButton)
        {
        if (resetArmed)
          {
          storyReset();
          }
        else
          {
          reply("\n\n*** Press 'Reset' again now to reset ***\n");
          resetArmed = true;
          }
        }
      else if (choices.getSelectedIndex() >= 0)
        {
        resetArmed = false;
        command = lookupCommand(choices.getSelectedItem());
        AddFeedbackForCommand(command);
        SHDoCommand(command);
        }
      setChoices();
      }
    return false;
    }

  public void setChoices()
    {
    if (choices.getSelectedIndex() >= 0)
      choices.deselect(choices.getSelectedIndex());
    if (choices.countItems() > 0)
      choices.delItems(0, choices.countItems() - 1);
    clearCommandAvailableFlags();
    SHComputeSatisfiedRules();
    SHAddAvailableCommands();
    }

  void addCommand(int c)
    {
    if (!variableIsAvailableCommand[c])
      {
      choices.addItem(variableName[c]);
      variableIsAvailableCommand[c] = true;
      }
    }

  void move(int location)
    {
    variableValue[currentLocation] = false;
    variableValue[location] = true;
    currentLocation = location;
    }

  void reply(String longstring)
    {
    StringTokenizer st = new StringTokenizer(longstring, " \n{}", true);
    while(st.hasMoreTokens())
      {
      String token = st.nextToken();
      if(token.equals("\n"))
        {
        text.appendText("\n");
        wrapCol = 0;
        continue;
        }
      // eat macros for now without doing anything for them
      if (token.equals("{")) {
        while(st.hasMoreTokens() && (!st.nextToken().equals("}")));
        continue;
        }
      int length = token.length();
      if( (wrapCol+length)>=NUMCOLS)
        { // token exceeds line
        wrapCol = 0;
        text.appendText("\n");
        }
      if(token.equals(" "))
        if(wrapCol == 0)
          continue;
      wrapCol += length;
      text.appendText(token);
      }
    }
  // may not be needed if store number for list entry
  int lookupCommand(String commandString)
    {
    int i;
    for (i = 0; i < numVariables; i++)
       {
       if (variableName[i] == commandString) return i;
       }
    return -1;
    }

  void allocateSpace()
    {
    variableName = new String[numVariables];
    variableValue = new boolean[numVariables];
    variableIsAvailableCommand = new boolean[numVariables];
    ruleSatisfied = new boolean[numRules];
    }

  void initialLocation()
    {
    // initial location
    currentLocation = SHFirstLocation();
    variableValue[currentLocation] = true;
    }

  void clearCommandAvailableFlags()
    {
    for (int i = 0; i < numVariables; i++)
      {
      variableIsAvailableCommand[i] = false;
      }
    }

  void AddFeedbackForCommand(int command)
    {
    reply("\n\n>> ");
    reply(variableName[command]);
    reply("\n");
    }

  //
  // The following functions are specific to the story.
  // They were custom generated by StoryHarp.
  //


