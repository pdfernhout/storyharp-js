/**
 * @author pdf
 */

  function storyReset()
    {
    text.setText("");
	var i;
    for (i = 0; i < numVariables; i++) variableValue[i] = false;
    initialLocation();
    SHComputeSatisfiedRules();
    // AddFeedbackForCommand(SHFirstCommand());
    SHDoCommand(SHFirstCommand());
    setChoices();
    }

  function action(e, o)
    {
    var command;
    if (o instanceof String)
      {
      if (e.target == aboutButton)
        {
        resetArmed = false;
        reply("\n\n========================================\n");
        reply("This applet's source was generated using\n");
        reply("the StoryHarp(TM) Authoring System\n");
        reply("from http://www.kurtz-fernhout.com\n");
        reply("StoryHarp and portions of the source are\n");
        reply("Copyright 1998 Kurtz-Fernhout Software\n");
        reply("========================================\n");
        }
      if (e.target == resetButton)
        {
        if (resetArmed)
          {
          storyReset();
          }
        else
          {
          reply("\n\n*** Press 'Reset' again now to reset ***\n");
          resetArmed = true;
          }
        }
      else if (choices.getSelectedIndex() >= 0)
        {
        resetArmed = false;
        command = lookupCommand(choices.getSelectedItem());
        AddFeedbackForCommand(command);
        SHDoCommand(command);
        }
      setChoices();
      }
    return false;
    }

  function setChoices()
    {
    if (choices.getSelectedIndex() >= 0)
      choices.deselect(choices.getSelectedIndex());
    if (choices.countItems() > 0)
      choices.delItems(0, choices.countItems() - 1);
    clearCommandAvailableFlags();
    SHComputeSatisfiedRules();
    SHAddAvailableCommands();
    }

  function addCommand(c)
    {
    if (!variableIsAvailableCommand[c])
      {
      choices.addItem(variableName[c]);
      variableIsAvailableCommand[c] = true;
      }
    }

  function move(location)
    {
    variableValue[currentLocation] = false;
    variableValue[location] = true;
    currentLocation = location;
    }

  function reply(longstring)
    {
	text.appendText(longstring);
		/*
    StringTokenizer st = new StringTokenizer(longstring, " \n{}", true);
    while(st.hasMoreTokens())
      {
      String token = st.nextToken();
      if(token.equals("\n"))
        {
        text.appendText("\n");
        wrapCol = 0;
        continue;
        }
      // eat macros for now without doing anything for them
      if (token.equals("{")) {
        while(st.hasMoreTokens() && (!st.nextToken().equals("}")));
        continue;
        }
      var length = token.length();
      if( (wrapCol+length)>=NUMCOLS)
        { // token exceeds line
        wrapCol = 0;
        text.appendText("\n");
        }
      if(token.equals(" "))
        if(wrapCol == 0)
          continue;
      wrapCol += length;
      text.appendText(token);
      }
      */
    }
	
  // may not be needed if store number for list entry
  function lookupCommand(commandString)
    {
    var i;
    for (i = 0; i < numVariables; i++)
       {
       if (variableName[i] == commandString) return i;
       }
    return -1;
    }

  function allocateSpace()
    {
    variableName = new String[numVariables];
    variableValue = new boolean[numVariables];
    variableIsAvailableCommand = new boolean[numVariables];
    ruleSatisfied = new boolean[numRules];
    }

  function initialLocation()
    {
    // initial location
    currentLocation = SHFirstLocation();
    variableValue[currentLocation] = true;
    }

  function clearCommandAvailableFlags()
    {
	var i;
    for (i = 0; i < numVariables; i++)
      {
      variableIsAvailableCommand[i] = false;
      }
    }

  function AddFeedbackForCommand(command)
    {
    reply("\n\n>> ");
    reply(variableName[command]);
    reply("\n");
    }
	
  //
  // The following functions are specific to the story.
  // They were custom generated by StoryHarp.
  //


  function SHNumberVariables()
    {
    return 32;
    }

  function SHNumberRules()
    {
    return 25;
    }

  function SHFirstLocation()
    {
    return 0;
    }

  function SHFirstCommand()
    {
    return 1;
    }

  function SHDefineVariables()
    {
    variableName[0] = "start";
    variableName[1] = "ask me a question";
    variableName[2] = "question 1";
    variableName[3] = "one year";
    variableName[4] = "one hundred years";
    variableName[5] = "one hundred million years";
    variableName[6] = "question 1 answered";
    variableName[7] = "what's the next question?";
    variableName[8] = "question 2";
    variableName[9] = "viscious elephants may jump up near roofs";
    variableName[10] = "my very elegant mother just served us nine pizzas";
    variableName[11] = "question 2 answered";
    variableName[12] = "mary valued everything more just so";
    variableName[13] = "question 3";
    variableName[14] = "as big as a pin";
    variableName[15] = "so small you couldn't see it";
    variableName[16] = "question 3 answered";
    variableName[17] = "as big as a person";
    variableName[18] = "question 4";
    variableName[19] = "eight minutes";
    variableName[20] = "question 4 answered";
    variableName[21] = "four years";
    variableName[22] = "question 5";
    variableName[23] = "about the same as hawaii";
    variableName[24] = "about the same as africa";
    variableName[25] = "question 5 answered";
    variableName[26] = "as big as the pacific ocean";
    variableName[27] = "question 6";
    variableName[28] = "about the same as the earth";
    variableName[29] = "about the same as ten earths";
    variableName[30] = "more than thousands of earths";
    variableName[31] = "question 6 answered";
    }

  function SHComputeSatisfiedRules()
    {
    ruleSatisfied[0] = variableValue[0];
    ruleSatisfied[1] = variableValue[2];
    ruleSatisfied[2] = variableValue[2];
    ruleSatisfied[3] = variableValue[2];
    ruleSatisfied[4] = variableValue[2] && variableValue[6];
    ruleSatisfied[5] = variableValue[8];
    ruleSatisfied[6] = variableValue[8];
    ruleSatisfied[7] = variableValue[8];
    ruleSatisfied[8] = variableValue[8] && variableValue[11];
    ruleSatisfied[9] = variableValue[13];
    ruleSatisfied[10] = variableValue[13];
    ruleSatisfied[11] = variableValue[13];
    ruleSatisfied[12] = variableValue[13] && variableValue[16];
    ruleSatisfied[13] = variableValue[18];
    ruleSatisfied[14] = variableValue[18];
    ruleSatisfied[15] = variableValue[18];
    ruleSatisfied[16] = variableValue[18] && variableValue[20];
    ruleSatisfied[17] = variableValue[22];
    ruleSatisfied[18] = variableValue[22];
    ruleSatisfied[19] = variableValue[22];
    ruleSatisfied[20] = variableValue[22] && variableValue[25];
    ruleSatisfied[21] = variableValue[27];
    ruleSatisfied[22] = variableValue[27];
    ruleSatisfied[23] = variableValue[27];
    ruleSatisfied[24] = variableValue[27] && variableValue[31];
    }

  function SHAddAvailableCommands()
    {
    if (ruleSatisfied[0]) addCommand(1);
    if (ruleSatisfied[1]) addCommand(3);
    if (ruleSatisfied[2]) addCommand(4);
    if (ruleSatisfied[3]) addCommand(5);
    if (ruleSatisfied[4]) addCommand(7);
    if (ruleSatisfied[5]) addCommand(9);
    if (ruleSatisfied[6]) addCommand(10);
    if (ruleSatisfied[7]) addCommand(12);
    if (ruleSatisfied[8]) addCommand(7);
    if (ruleSatisfied[9]) addCommand(14);
    if (ruleSatisfied[10]) addCommand(15);
    if (ruleSatisfied[11]) addCommand(17);
    if (ruleSatisfied[12]) addCommand(7);
    if (ruleSatisfied[13]) addCommand(19);
    if (ruleSatisfied[14]) addCommand(3);
    if (ruleSatisfied[15]) addCommand(21);
    if (ruleSatisfied[16]) addCommand(7);
    if (ruleSatisfied[17]) addCommand(23);
    if (ruleSatisfied[18]) addCommand(24);
    if (ruleSatisfied[19]) addCommand(26);
    if (ruleSatisfied[20]) addCommand(7);
    if (ruleSatisfied[21]) addCommand(28);
    if (ruleSatisfied[22]) addCommand(29);
    if (ruleSatisfied[23]) addCommand(30);
    if (ruleSatisfied[24]) addCommand(7);
    }

  function SHDoCommand(command)
    {
    if (command == 1 && ruleSatisfied[0])
      {
      reply("{music Debussy's Claire de Lune.RMI}Welcome to a very short astronomy quiz. The first question is: How long does it take for the sun to make one revolution around our galaxy?");
      move(2);
      }
    if (command == 3 && ruleSatisfied[1])
      {
      reply("No, that's how long it takes the earth to go once around the sun. Think bigger.");
      }
    if (command == 4 && ruleSatisfied[2])
      {
      reply("Not long enough. Think about how big the galaxy is.");
      }
    if (command == 5 && ruleSatisfied[3])
      {
      reply("{sound tada} Correct!");
      variableValue[6] = true;
      }
    if (command == 7 && ruleSatisfied[4])
      {
      reply("The second question is: Which one of these sentences has the same first letters as the planets in our solar system?");
      move(8);
      }
    if (command == 9 && ruleSatisfied[5])
      {
      reply("Close, but no cookie. Here's a hint: earth is the third planet.");
      }
    if (command == 10 && ruleSatisfied[6])
      {
      reply("{sound tada}That is correct! Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto!");
      variableValue[11] = true;
      }
    if (command == 12 && ruleSatisfied[7])
      {
      reply("Nope, not enough planets. Here's a hint: nine.");
      }
    if (command == 7 && ruleSatisfied[8])
      {
      reply("The third question is: If you made a map of the universe as big as the United States, on this map, how big would the earth be?");
      move(13);
      }
    if (command == 14 && ruleSatisfied[9])
      {
      reply("Too big! Surprised?");
      }
    if (command == 15 && ruleSatisfied[10])
      {
      reply("{sound tada}Absolutely right. Makes you think, doesn't it?");
      variableValue[16] = true;
      }
    if (command == 17 && ruleSatisfied[11])
      {
      reply("Very much too big. This is the universe we're talking about.");
      }
    if (command == 7 && ruleSatisfied[12])
      {
      reply("Okay, question four is: How long does it take light to travel from the nearest star to Earth?");
      move(18);
      }
    if (command == 19 && ruleSatisfied[13])
      {
      reply("{sound tada}Correct! The sun is the nearest star to Earth, and it takes light about eight minutes to get to the Earth from there.");
      variableValue[20] = true;
      }
    if (command == 3 && ruleSatisfied[14])
      {
      reply("Nope. Try again.");
      }
    if (command == 21 && ruleSatisfied[15])
      {
      reply("Well, actually this is a trick question. You are right that it takes four years for light to travel from Alpha Centauri, our sun's nearest neighbor. But the sun is a star too.");
      }
    if (command == 7 && ruleSatisfied[16])
      {
      reply("Question five is: How much surface area does the Earth's moon have?");
      move(22);
      }
    if (command == 23 && ruleSatisfied[17])
      {
      reply("Nope, too small.");
      }
    if (command == 24 && ruleSatisfied[18])
      {
      reply("{sound tada}Yep, just right. Good for you!");
      variableValue[25] = true;
      }
    if (command == 26 && ruleSatisfied[19])
      {
      reply("Nope, too big.");
      }
    if (command == 7 && ruleSatisfied[20])
      {
      reply("Question six is: If you broke the moon apart and used it to build O'Neill style space habitats (huge rotating cylinders miles in diameter), how much inside surface area would they have in total?");
      move(27);
      }
    if (command == 28 && ruleSatisfied[21])
      {
      reply("Way too small. Try again.  You may have been thinking about how much surface area you could produce by grinding up a good sized comet.");
      }
    if (command == 29 && ruleSatisfied[22])
      {
      reply("Too small. Try again.  You may have been thinking about how much surface area you could produce using a very big asteroid.");
      }
    if (command == 30 && ruleSatisfied[23])
      {
      reply("{sound tada}Correct. Way to think big! But if you really want to build space habitats, it seems easier to do it out of asteroids or comets.  Many asteroids come by closer than the moon anyway.");
      variableValue[31] = true;
      }
    if (command == 7 && ruleSatisfied[24])
      {
      reply("That's all for now. Thanks for playing.");
      move(27);
      }
    }
